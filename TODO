
 * собирать вендора/порты самостоятельо при первом тесте => заполнить базовые
   данные => дать подтвердить их админу для добавления в DB
 * загружать базу вендоров http://standards.ieee.org/develop/regauth/oui/oui.txt
 * К MAC привязывать вендора (в сплывающей подсказке или паралельно с договором)
 * Отображать в статусе порта connected при крайнем успешном обнаружении
   на порту mac. По last_update.
 * В базе хранить ifIndex-ы, их ранжировать в базе с определенным типом.
 * в запросе проверять тип коммутатора, если изменился, то статус (варианты):
   - предупредить и больше не проверять порты (реализовано)
   - добавить в таблицу новый коммутатор с темиже параметрами но порты не переносить, старый заблокировать.
 * тестирование линий. Пример http://subnets.ru/blog/?p=1434

 * каждый процес хранит в базе последнее действие, его время и продолжительность, это можно отмониторить в вебинтерфейсе
 * при привязке мака к сервису проверяем совпадает ли он с маком устройств, если да, то блокируем порт.

 * нужно дописать и оттестировать изменение кол-ва портов (добавление плат с портами) на горячую или ручное обновление
  snmp_devices config:
    multislot [ dynamic | static_by <ports> ]
    start_port_from_zerro 1
    или port_range_from   1 ((default=1) приятнее, гибче и короче)
 * на statadm проверять соответствие портов с теми, которые мы добыли. (на statadm найти login, получеть порт, сравнить со своим, если разница - установить флаг на порту)
 * возможно требуется вынести конфигурацию обходчика в отдельный конфиг, а параметры dsn* и area сделать возможным переопределять из параметров запуска демона.

# Если MAC не совпал, блокируем устройство, записываем ошибку; запрашиваем по маку на этом хосту (среди удаленных), если находим - разблокируем,
# если нет, то добавляем новое устройство.
# Используем 2 флага: блокирован, не просматривать => опрашивать порты !(_&&_)
#   0 0 => 1 - устройство в работе
#   0 1 => 0 - устройство добавлено автоматически по хосту после блокировки предшествующнго устройства (требует ручного подтверждения) (не учавствует в сборе инфы)
#   1 0 => 0 - заблокировали но не вывили из списка видимых
#   1 1 => 0 - устройство удалено
# Повторная попытка поставить железку на тоже место должна привести к предложению разблокировать старое или полностью удалить из базы.

0000 0
0001 1
0010 2
0011 3
0100 4
0101 5
0110 6
0111 7
1000 8
1001 9
1010 a
1011 b
1100 c
1101 d
1110 e
1111 f
